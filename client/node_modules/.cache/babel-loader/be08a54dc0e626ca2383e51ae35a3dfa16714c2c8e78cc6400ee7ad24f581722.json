{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\n\n// Async thunks\nexport const fetchConversations = createAsyncThunk('chat/fetchConversations', async (_, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await axios.get('/api/conversations', {\n      withCredentials: true\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response, _error$response$data;\n    return rejectWithValue(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || 'Failed to fetch conversations');\n  }\n});\nexport const fetchMessages = createAsyncThunk('chat/fetchMessages', async (userId, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await axios.get(`/api/messages/${userId}`, {\n      withCredentials: true\n    });\n    return {\n      userId,\n      messages: response.data\n    };\n  } catch (error) {\n    var _error$response2, _error$response2$data;\n    return rejectWithValue(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.error) || 'Failed to fetch messages');\n  }\n});\nconst initialState = {\n  conversations: [],\n  messages: {},\n  currentChat: null,\n  loading: false,\n  error: null,\n  wsConnected: false\n};\nconst chatSlice = createSlice({\n  name: 'chat',\n  initialState,\n  reducers: {\n    clearError: state => {\n      state.error = null;\n    },\n    setCurrentChat: (state, action) => {\n      state.currentChat = action.payload;\n    },\n    addMessage: (state, action) => {\n      const {\n        senderId,\n        receiverId,\n        message,\n        productId,\n        timestamp\n      } = action.payload;\n      const chatKey = [senderId, receiverId].sort().join('-');\n      if (!state.messages[chatKey]) {\n        state.messages[chatKey] = [];\n      }\n      state.messages[chatKey].push({\n        id: Date.now(),\n        sender_id: senderId,\n        receiver_id: receiverId,\n        product_id: productId,\n        message,\n        created_at: timestamp,\n        sender_name: 'You' // This will be updated when messages are fetched\n      });\n    },\n    setWebSocketStatus: (state, action) => {\n      state.wsConnected = action.payload;\n    },\n    clearMessages: state => {\n      state.messages = {};\n      state.currentChat = null;\n    }\n  },\n  extraReducers: builder => {\n    builder\n    // Fetch conversations\n    .addCase(fetchConversations.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(fetchConversations.fulfilled, (state, action) => {\n      state.loading = false;\n      state.conversations = action.payload;\n    }).addCase(fetchConversations.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    })\n    // Fetch messages\n    .addCase(fetchMessages.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(fetchMessages.fulfilled, (state, action) => {\n      var _state$currentChat;\n      state.loading = false;\n      const {\n        userId,\n        messages\n      } = action.payload;\n      const currentUser = ((_state$currentChat = state.currentChat) === null || _state$currentChat === void 0 ? void 0 : _state$currentChat.id) || userId;\n      const chatKey = [currentUser, userId].sort().join('-');\n      state.messages[chatKey] = messages;\n    }).addCase(fetchMessages.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    });\n  }\n});\nexport const {\n  clearError,\n  setCurrentChat,\n  addMessage,\n  setWebSocketStatus,\n  clearMessages\n} = chatSlice.actions;\nexport default chatSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axios","fetchConversations","_","rejectWithValue","response","get","withCredentials","data","error","_error$response","_error$response$data","fetchMessages","userId","messages","_error$response2","_error$response2$data","initialState","conversations","currentChat","loading","wsConnected","chatSlice","name","reducers","clearError","state","setCurrentChat","action","payload","addMessage","senderId","receiverId","message","productId","timestamp","chatKey","sort","join","push","id","Date","now","sender_id","receiver_id","product_id","created_at","sender_name","setWebSocketStatus","clearMessages","extraReducers","builder","addCase","pending","fulfilled","rejected","_state$currentChat","currentUser","actions","reducer"],"sources":["C:/Users/ashit/OneDrive/Desktop/project1/client/src/store/slices/chatSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\n\r\n// Async thunks\r\nexport const fetchConversations = createAsyncThunk(\r\n  'chat/fetchConversations',\r\n  async (_, { rejectWithValue }) => {\r\n    try {\r\n      const response = await axios.get('/api/conversations', { withCredentials: true });\r\n      return response.data;\r\n    } catch (error) {\r\n      return rejectWithValue(error.response?.data?.error || 'Failed to fetch conversations');\r\n    }\r\n  }\r\n);\r\n\r\nexport const fetchMessages = createAsyncThunk(\r\n  'chat/fetchMessages',\r\n  async (userId, { rejectWithValue }) => {\r\n    try {\r\n      const response = await axios.get(`/api/messages/${userId}`, { withCredentials: true });\r\n      return { userId, messages: response.data };\r\n    } catch (error) {\r\n      return rejectWithValue(error.response?.data?.error || 'Failed to fetch messages');\r\n    }\r\n  }\r\n);\r\n\r\nconst initialState = {\r\n  conversations: [],\r\n  messages: {},\r\n  currentChat: null,\r\n  loading: false,\r\n  error: null,\r\n  wsConnected: false,\r\n};\r\n\r\nconst chatSlice = createSlice({\r\n  name: 'chat',\r\n  initialState,\r\n  reducers: {\r\n    clearError: (state) => {\r\n      state.error = null;\r\n    },\r\n    setCurrentChat: (state, action) => {\r\n      state.currentChat = action.payload;\r\n    },\r\n    addMessage: (state, action) => {\r\n      const { senderId, receiverId, message, productId, timestamp } = action.payload;\r\n      const chatKey = [senderId, receiverId].sort().join('-');\r\n      \r\n      if (!state.messages[chatKey]) {\r\n        state.messages[chatKey] = [];\r\n      }\r\n      \r\n      state.messages[chatKey].push({\r\n        id: Date.now(),\r\n        sender_id: senderId,\r\n        receiver_id: receiverId,\r\n        product_id: productId,\r\n        message,\r\n        created_at: timestamp,\r\n        sender_name: 'You', // This will be updated when messages are fetched\r\n      });\r\n    },\r\n    setWebSocketStatus: (state, action) => {\r\n      state.wsConnected = action.payload;\r\n    },\r\n    clearMessages: (state) => {\r\n      state.messages = {};\r\n      state.currentChat = null;\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      // Fetch conversations\r\n      .addCase(fetchConversations.pending, (state) => {\r\n        state.loading = true;\r\n        state.error = null;\r\n      })\r\n      .addCase(fetchConversations.fulfilled, (state, action) => {\r\n        state.loading = false;\r\n        state.conversations = action.payload;\r\n      })\r\n      .addCase(fetchConversations.rejected, (state, action) => {\r\n        state.loading = false;\r\n        state.error = action.payload;\r\n      })\r\n      // Fetch messages\r\n      .addCase(fetchMessages.pending, (state) => {\r\n        state.loading = true;\r\n        state.error = null;\r\n      })\r\n      .addCase(fetchMessages.fulfilled, (state, action) => {\r\n        state.loading = false;\r\n        const { userId, messages } = action.payload;\r\n        const currentUser = state.currentChat?.id || userId;\r\n        const chatKey = [currentUser, userId].sort().join('-');\r\n        state.messages[chatKey] = messages;\r\n      })\r\n      .addCase(fetchMessages.rejected, (state, action) => {\r\n        state.loading = false;\r\n        state.error = action.payload;\r\n      });\r\n  },\r\n});\r\n\r\nexport const { \r\n  clearError, \r\n  setCurrentChat, \r\n  addMessage, \r\n  setWebSocketStatus, \r\n  clearMessages \r\n} = chatSlice.actions;\r\n\r\nexport default chatSlice.reducer; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}